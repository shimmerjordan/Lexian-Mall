<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="lexian.mapper.CustomerMapper">
	<resultMap id="BaseResultMap" type="lexian.entity.Customer">
		<id column="ID" property="id" jdbcType="INTEGER" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="phone" property="phone" jdbcType="VARCHAR" />
		<result column="age" property="age" jdbcType="INTEGER" />
		<result column="sex" property="sex" jdbcType="INTEGER" />
		<result column="pwd" property="pwd" jdbcType="VARCHAR" />
		<result column="nick_name" property="nickName" jdbcType="VARCHAR" />
		<result column="user_image" property="userImage" jdbcType="VARCHAR" />
		<result column="birthday" property="birthday" jdbcType="DATE" />
		<result column="login_name" property="loginName" jdbcType="VARCHAR" />
		<result column="register_time" property="registerTime"
			jdbcType="INTEGER" />
		<result column="is_delete" property="isDelete" jdbcType="INTEGER" />
	</resultMap>

	<!-- 注册使用，添加手机、登录名和密码，其他自增或默认 -->
	<insert id="addNewCustomer" parameterType="java.util.HashMap">
		insert into customer
		(phone, pwd, login_name, nick_name)
		values (#{mobile}, #{password},
		#{loginName}, #{nickName})
	</insert>

	<!-- 用户名登录模块，根据用户登录名查找密码 -->
	<select id="getPwdByName" parameterType="java.util.HashMap"
		resultType="java.lang.String">
		SELECT
		pwd
		FROM
		customer
		WHERE
		login_name = #{loginName}
	</select>

	<!-- 根据用户登录名获取用户的所有信息，并将birthday以及register_time这两个字段利用内置函数转化时间类型 -->
	<select id="loginByName" parameterType="java.util.HashMap"
		resultType="java.util.HashMap">
		SELECT
		*,
		FROM_UNIXTIME(birthday,'%Y-%m-%d') as birthdayDate,
		FROM_UNIXTIME(register_time,'%Y-%m-%d %H:%i:%s') as registerDateTime
		FROM
		customer
		WHERE
		login_name = #{loginName}
	</select>

	<!-- 根据用户手机号进行登录，查找用户的所有信息 -->
	<select id="loginByPhone" parameterType="java.util.HashMap"
		resultType="java.util.HashMap">
		SELECT
		*
		FROM
		customer
		WHERE
		phone = #{mobile}
	</select>

	<!-- 核查手机号是否存在，使用IFNULL函数，若存在记录则返回该条记录，若不存在则返回0 -->
	<select id="checkPhoneExistance" parameterType="java.util.HashMap"
		resultType="java.lang.Integer">
		select IFNULL(
		(select id
		from customer
		where phone =
		#{mobile}
		), 0)
	</select>

	<!-- 核查登录名（唯一）是否存在，使用IFNULL函数，若存在记录则返回该条记录，拖不存在则返回0 -->
	<select id="checkNameExistance" parameterType="java.util.HashMap"
		resultType="java.lang.Integer">
		select IFNULL(
		(select id
		from customer
		where login_name =
		#{loginName}
		), 0)
	</select>

	<!-- 更新用户密码 -->
	<update id="updateCustomerPwd" parameterType="java.util.HashMap">
		update customer
		set
		pwd = #{password}
		where phone = #{mobile}
	</update>

	<!-- 默认修改信息的方法 -->
	<update id="updateByPrimaryKey" parameterType="lexian.entity.Customer">
		update customer
		set name = #{name,jdbcType=VARCHAR},
		phone = #{phone,jdbcType=VARCHAR},
		age = #{age,jdbcType=INTEGER},
		sex = #{sex,jdbcType=INTEGER},
		pwd =
		#{pwd,jdbcType=VARCHAR},
		nick_name = #{nickName,jdbcType=VARCHAR},
		user_image = #{userImage,jdbcType=VARCHAR},
		birthday =
		#{birthday,jdbcType=DATE},
		login_name = #{loginName,jdbcType=VARCHAR},
		is_delete = #{isDelete,jdbcType=INTEGER}
		where ID =
		#{id,jdbcType=INTEGER}
	</update>

	<!-- 根据用户ID选择钱包的相关字段信息 -->
	<select id="selectById" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		SELECT c.*,w.money_amount as moneyAmount,w.wallet_pwd as
		walletPwd,w.id as walletId FROM `customer` c left JOIN wallet w on c.ID = w.customer_id
		where c.ID = #{id}
	</select>

	<!-- 身份认证 -->
	<update id="setCertificationId" parameterType="java.util.HashMap">
		UPDATE
		  customer
		SET
		  certification_id = #{certificationId},
		  name = #{name}
		WHERE
		  ID = #{customerId}
	</update>

	<!-- 个人信息的修改 -->
	<update id="updateUserInfo" parameterType="java.util.HashMap">
		UPDATE
		  customer
		SET
		  nick_name = #{nickName},
		  email = #{email},
		  sex = #{sex},
		  phone = #{mobile},
		  user_image = #{user_img}
		WHERE
		  ID = #{customerId}
	</update>

</mapper>